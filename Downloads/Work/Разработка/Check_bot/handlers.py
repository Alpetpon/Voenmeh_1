from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
import aiohttp
from loguru import logger
from typing import Optional
import asyncio
from datetime import datetime
from sqlalchemy.ext.asyncio import AsyncSession

from database import get_or_create_user, get_user_by_telegram_id, create_user_if_not_exists
from models import User
from services.receipt_processor import ReceiptProcessor
from services.user_cloud_storage_service import user_cloud_storage_service
from services.user_oauth_service import user_oauth_service
from config import Settings

router = Router()
settings = Settings()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ReceiptStates(StatesGroup):
    waiting_for_receipt = State()

# OAuth –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
OAUTH_HOST = "localhost"
OAUTH_PORT = 8080
REDIRECT_URI = f"http://{OAUTH_HOST}:{OAUTH_PORT}/oauth/callback"


def get_main_keyboard(user_disk_connected: bool = False) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    buttons = [
        [InlineKeyboardButton(text="üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫", callback_data="upload_receipt")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ —á–µ–∫–∏", callback_data="my_receipts")]
    ]
    
    if user_disk_connected:
        buttons.append([InlineKeyboardButton(text="üíæ –°—Ç–∞—Ç—É—Å –¥–∏—Å–∫–∞", callback_data="disk_status")])
        buttons.append([InlineKeyboardButton(text="üîå –û—Ç–∫–ª—é—á–∏—Ç—å –¥–∏—Å–∫", callback_data="disconnect_disk")])
    else:
        buttons.append([InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫", callback_data="connect_disk")])
    
    buttons.append([InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.message(Command("start"))
async def cmd_start(message: Message, db: AsyncSession):
    """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await create_user_if_not_exists(message.from_user)
        
        welcome_text = f"""
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç "–ê–≤—Ç–æ—á–µ–∫–∏"!</b>

üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!

üìã <b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:</b>
‚Ä¢ üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ —á–µ–∫–æ–≤ —Å QR-–∫–æ–¥–∞–º–∏
‚Ä¢ üíæ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–∞—à –ª–∏—á–Ω—ã–π –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
‚Ä¢ üìä –°–æ–∑–¥–∞–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã –¥–ª—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏

üöÄ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
        """
        
        keyboard = get_main_keyboard(user.yandex_disk_connected if user else False)
        await message.answer(welcome_text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """
ü§ñ –ë–æ—Ç "–ê–≤—Ç–æ—á–µ–∫–∏" - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–æ–≤

üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/receipts - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–µ–∫–∏
/connect_disk - –ü–æ–¥–∫–ª—é—á–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
/disk_status - –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–∏—Å–∫–∞
/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)

üì∏ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∞—à –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –∫–æ–º–∞–Ω–¥–æ–π /connect_disk
2. –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —á–µ–∫ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ
3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç QR-–∫–æ–¥ –∏ –ø–æ–ª—É—á–∏—Ç –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞
4. –§–æ—Ç–æ –∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ –≤–∞—à –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫

üí° –ë–æ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç:
- –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ —á–µ–∫–æ–≤
- CSV —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏–π
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç—ã –¥–ª—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏

üîí –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞ –≤–∞—à –ª–∏—á–Ω—ã–π –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –≤ –ø–∞–ø–∫—É "–ê–≤—Ç–æ—á–µ–∫–∏" —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –≥–æ–¥–∞–º –∏ –º–µ—Å—è—Ü–∞–º.
    """
    await message.answer(help_text)


@router.message(Command("receipts"))
async def cmd_receipts(message: Message, db: AsyncSession):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —á–µ–∫–æ–≤"""
    try:
        user = await get_or_create_user(message.from_user, db)
        
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        processor = ReceiptProcessor(user.id, db)
        receipts = await processor.get_user_receipts(limit=10)
        
        if not receipts:
            await message.answer("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–µ–∫–æ–≤.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —á–µ–∫–æ–≤
        receipts_text = "üìã –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–µ–∫–∏:\n\n"
        for i, receipt in enumerate(receipts, 1):
            status_emoji = "‚úÖ" if receipt['is_processed'] else "‚ö†Ô∏è"
            receipts_text += f"{status_emoji} {i}. {receipt['date']} - {receipt['sum']:.2f} ‚ÇΩ\n"
            receipts_text += f"   üè™ {receipt['organization']}\n\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_receipts")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")]
        ])
        
        await message.answer(receipts_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ–∫–æ–≤: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ–∫–æ–≤.")


@router.callback_query(lambda c: c.data.startswith("receipt_details:"))
async def show_receipt_details(callback: CallbackQuery, db: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–∫–∞"""
    try:
        receipt_id = int(callback.data.split(":")[1])
        user = await get_or_create_user(callback.from_user, db)
        
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –≤ ReceiptProcessor –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
        # –ü–æ–∫–∞ —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        
        detail_text = f"üìã –î–µ—Ç–∞–ª–∏ —á–µ–∫–∞ #{receipt_id}\n\n"
        detail_text += "‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–∫–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö."
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —á–µ–∫–æ–≤", callback_data="user_receipts")]
        ])
        
        await callback.message.edit_text(detail_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —á–µ–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —á–µ–∫–∞", show_alert=True)


@router.callback_query(lambda c: c.data == "refresh_receipts")
async def refresh_receipts(callback: CallbackQuery, db: AsyncSession):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–µ–∫–æ–≤"""
    try:
        user = await get_or_create_user(callback.from_user, db)
        
        processor = ReceiptProcessor(user.id, db)
        receipts = await processor.get_user_receipts(limit=10)
        
        if not receipts:
            await callback.message.edit_text("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–µ–∫–æ–≤.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–µ–∫–æ–≤
        receipts_text = "üìã –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–µ–∫–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ):\n\n"
        for i, receipt in enumerate(receipts, 1):
            status_emoji = "‚úÖ" if receipt['is_processed'] else "‚ö†Ô∏è"
            receipts_text += f"{status_emoji} {i}. {receipt['date']} - {receipt['sum']:.2f} ‚ÇΩ\n"
            receipts_text += f"   üè™ {receipt['organization']}\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_receipts")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")]
        ])
        
        await callback.message.edit_text(receipts_text, reply_markup=keyboard)
        await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–µ–∫–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞", show_alert=True)


@router.message(Command("admin"))
async def cmd_admin(message: Message, db: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å"""
    try:
        user = await get_or_create_user(message.from_user, db)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: "
                   f"user.id={user.id}, is_admin={user.is_admin}, "
                   f"username={user.username}, first_name={user.first_name}")
        
        if not user.is_admin:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            from sqlalchemy import select
            from models import User
            
            fresh_user = await db.scalar(select(User).where(User.telegram_id == message.from_user.id))
            if fresh_user:
                logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑ –ë–î: user.id={fresh_user.id}, is_admin={fresh_user.is_admin}")
                if fresh_user.is_admin:
                    # –ï—Å–ª–∏ –≤ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –Ω–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –Ω–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º
                    user.is_admin = True
                    await db.commit()
                    logger.info("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                else:
                    await message.answer(
                        "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
                        "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.\n"
                        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤.\n\n"
                        f"<i>Debug: User ID {user.id}, Admin: {user.is_admin}</i>",
                        parse_mode="HTML"
                    )
                    return
            else:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ")
                await message.answer(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞</b>\n\n"
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode="HTML"
                )
            return
        
        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ—á–Ω–æ –∞–¥–º–∏–Ω
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.username or user.first_name} (ID: {user.id}) –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        from sqlalchemy import select, func
        from models import User, Receipt
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_count = await db.scalar(select(func.count(User.id)))
        active_users = await db.scalar(select(func.count(User.id)).where(User.yandex_disk_connected == True))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ–∫–æ–≤
        receipts_count = await db.scalar(select(func.count(Receipt.id)))
        processed_receipts = await db.scalar(select(func.count(Receipt.id)).where(Receipt.is_processed == True))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        from datetime import date
        today = date.today()
        receipts_today = await db.scalar(
            select(func.count(Receipt.id)).where(func.date(Receipt.created_at) == today)
        )
        
        # –û–±—â–∞—è —Å—É–º–º–∞ —á–µ–∫–æ–≤
        total_sum = await db.scalar(select(func.sum(Receipt.total_sum)).where(Receipt.is_processed == True))
        total_sum = total_sum or 0
        
        admin_text = f"""
üëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>
<i>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name or user.username}!</i>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: <code>{users_count}</code>
‚Ä¢ –ü–æ–¥–∫–ª—é—á–∏–ª–∏ –¥–∏—Å–∫: <code>{active_users}</code> ({(active_users/users_count*100) if users_count > 0 else 0:.1f}%)

üßæ <b>–ß–µ–∫–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: <code>{receipts_count}</code>
‚Ä¢ –£—Å–ø–µ—à–Ω–æ: <code>{processed_receipts}</code> ({(processed_receipts/receipts_count*100) if receipts_count > 0 else 0:.1f}%)
‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: <code>{receipts_today}</code>

üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞ —á–µ–∫–æ–≤: <code>{total_sum:,.2f} ‚ÇΩ</code>

üïí <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üöÄ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
            ],
            [
                InlineKeyboardButton(text="üì± –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã", callback_data="admin_logs"),
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="admin_refresh")
            ],
            [
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ])
        
        await message.answer(admin_text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π

@router.callback_query(F.data == "admin_stats")
async def callback_admin_stats(callback: CallbackQuery, db: AsyncSession):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    await callback.answer()
    
    user, is_admin = await check_admin_rights(callback.from_user, db)
    if not is_admin:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        from sqlalchemy import select, func, and_
        from models import User, Receipt
        from datetime import date, timedelta
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
        yesterday = date.today() - timedelta(days=1)
        week_ago = date.today() - timedelta(days=7)
        month_ago = date.today() - timedelta(days=30)
        
        receipts_yesterday = await db.scalar(
            select(func.count(Receipt.id)).where(func.date(Receipt.created_at) == yesterday)
        )
        receipts_week = await db.scalar(
            select(func.count(Receipt.id)).where(Receipt.created_at >= week_ago)
        )
        receipts_month = await db.scalar(
            select(func.count(Receipt.id)).where(Receipt.created_at >= month_ago)
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —á–µ–∫–æ–≤
        fiscal_receipts = await db.scalar(
            select(func.count(Receipt.id)).where(Receipt.fiscal_number.isnot(None))
        )
        self_employed_receipts = await db.scalar(
            select(func.count(Receipt.id)).where(Receipt.inn.isnot(None))
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
        error_receipts = await db.scalar(
            select(func.count(Receipt.id)).where(Receipt.processing_error.isnot(None))
        )
        
        # –¢–æ–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
        top_orgs_query = select(
            Receipt.organization_name, 
            func.count(Receipt.id).label('count'),
            func.sum(Receipt.total_sum).label('total')
        ).where(
            Receipt.organization_name.isnot(None)
        ).group_by(Receipt.organization_name).order_by(func.count(Receipt.id).desc()).limit(5)
        
        top_orgs = await db.execute(top_orgs_query)
        top_orgs_result = top_orgs.fetchall()
        
        stats_text = f"""
üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üìÖ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º:</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ –í—á–µ—Ä–∞: <code>{receipts_yesterday}</code> —á–µ–∫–æ–≤
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: <code>{receipts_week}</code> —á–µ–∫–æ–≤  
‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: <code>{receipts_month}</code> —á–µ–∫–æ–≤

üßæ <b>–¢–∏–ø—ã —á–µ–∫–æ–≤:</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ –§–∏—Å–∫–∞–ª—å–Ω—ã–µ (–§–ù–°): <code>{fiscal_receipts}</code>
‚Ä¢ –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–µ: <code>{self_employed_receipts}</code>
‚Ä¢ –° –æ—à–∏–±–∫–∞–º–∏: <code>{error_receipts}</code>

üè™ <b>–¢–æ–ø-5 –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π:</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
"""
        
        for i, org in enumerate(top_orgs_result, 1):
            org_name = org[0][:25] + "..." if len(org[0]) > 25 else org[0]
            stats_text += f"{i}. <b>{org_name}</b>\n   üìä {org[1]} —á–µ–∫–æ–≤ ‚Ä¢ üí∞ {org[2]:,.0f} ‚ÇΩ\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìà –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="admin_export_stats"),
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
        ])
        
        await callback.message.edit_text(stats_text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


@router.callback_query(F.data == "admin_users")
async def callback_admin_users(callback: CallbackQuery, db: AsyncSession):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ - —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"""
    await callback.answer()
    
    user, is_admin = await check_admin_rights(callback.from_user, db)
    if not is_admin:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    disabled_text = """
üö´ <b>–§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞</b>

üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b> –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.

üí° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /make_admin –∏ /revoke_admin
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ /check_admin
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

üîô –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π.
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(disabled_text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "admin_reports")
async def callback_admin_reports(callback: CallbackQuery, db: AsyncSession):
    """–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ - —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"""
    await callback.answer()
    
    user, is_admin = await check_admin_rights(callback.from_user, db)
    if not is_admin:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    disabled_text = """
üö´ <b>–§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞</b>

üìà <b>–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</b> –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.

üí° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:</b>
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –≥–ª–∞–≤–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

üîô –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π.
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(disabled_text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "admin_settings")
async def callback_admin_settings(callback: CallbackQuery, db: AsyncSession):
    """–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"""
    await callback.answer()
    
    user, is_admin = await check_admin_rights(callback.from_user, db)
    if not is_admin:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    disabled_text = """
üö´ <b>–§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞</b>

üîß <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b> –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.

üí° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:</b>
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—Ç—Å—è –≤ —Ñ–∞–π–ª–µ config.py
‚Ä¢ –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ "–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã"

üîô –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π.
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(disabled_text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "admin_logs")
async def callback_admin_logs(callback: CallbackQuery, db: AsyncSession):
    """–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã"""
    await callback.answer()
    
    user, is_admin = await check_admin_rights(callback.from_user, db)
    if not is_admin:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    import os
    from datetime import datetime
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ª–æ–≥–∞
    log_file = "logs/bot.log"
    logs_text = """
üì± <b>–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã</b>

üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
"""
    
    try:
        if os.path.exists(log_file):
            with open(log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                last_lines = lines[-10:] if len(lines) > 10 else lines
                
                for line in last_lines:
                    if line.strip():
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞
                        if "ERROR" in line:
                            logs_text += f"üî¥ <code>{line.strip()[:80]}...</code>\n"
                        elif "WARNING" in line:
                            logs_text += f"üü° <code>{line.strip()[:80]}...</code>\n"
                        elif "INFO" in line:
                            logs_text += f"üü¢ <code>{line.strip()[:80]}...</code>\n"
                        else:
                            logs_text += f"‚ö™ <code>{line.strip()[:80]}...</code>\n"
        else:
            logs_text += "üìù –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
    except Exception as e:
        logs_text += f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)[:50]}\n"
    
    logs_text += f"""
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üïí <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤:</b>
‚Ä¢ üü¢ INFO: –û–±—ã—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
‚Ä¢ üü° WARNING: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è  
‚Ä¢ üî¥ ERROR: –û—à–∏–±–∫–∏ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ ‚ö™ DEBUG: –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üî¥ –¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏", callback_data="admin_logs_errors"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_logs")
        ],
        [
            InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤", callback_data="admin_export_logs"),
            InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", callback_data="admin_clear_logs")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(logs_text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "admin_refresh")
async def callback_admin_refresh(callback: CallbackQuery, db: AsyncSession):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...")
    
    user, is_admin = await check_admin_rights(callback.from_user, db)
    if not is_admin:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    await cmd_admin(callback.message, db)


@router.callback_query(F.data == "admin_back")
async def callback_admin_back(callback: CallbackQuery, db: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    await callback.answer()
    
    user, is_admin = await check_admin_rights(callback.from_user, db)
    if not is_admin:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å
    await cmd_admin(callback.message, db)


@router.message(F.photo | F.document)
async def handle_photo_or_document(message: Message, db: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_or_create_user(message.from_user, db)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
        if not user.yandex_disk_connected:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫", callback_data="connect_disk")]
            ])
            await message.answer(
                "‚ö†Ô∏è –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ–∫–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫!\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:",
                reply_markup=keyboard
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à —á–µ–∫...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —á–µ–∫–æ–≤ —Å –Ω–æ–≤—ã–º —Å–µ—Ä–≤–∏—Å–æ–º
            processor = ReceiptProcessor(user.id, db)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
            if message.photo:
                # –≠—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
                photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                file_info = await message.bot.get_file(photo.file_id)
            elif message.document:
                # –≠—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç
                document = message.document
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                if not document.mime_type or not document.mime_type.startswith('image/'):
                    await processing_msg.edit_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫–∞.")
                    return
                
                file_info = await message.bot.get_file(document.file_id)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            photo_file = await message.bot.download_file(file_info.file_path)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ–∫
            result = await processor.process_receipt_photo(photo_file.read(), message.from_user)
            
            if result['success']:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ None
                receipt_date = result.get('receipt_date')
                if receipt_date:
                    date_str = receipt_date.strftime('%d.%m.%Y %H:%M')
                    year = receipt_date.year
                    month = receipt_date.month
                else:
                    date_str = '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'
                    year = datetime.now().year
                    month = datetime.now().month
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ None
                total_sum = result.get('total_sum')
                logger.info(f"üîç DEBUG: result —Å–æ–¥–µ—Ä–∂–∏—Ç: {result}")
                logger.info(f"üîç DEBUG: total_sum –∏–∑ result = {total_sum}")
                if total_sum is not None:
                    sum_str = f"{total_sum} ‚ÇΩ"
                else:
                    sum_str = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
                
                success_text = f"""
‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!

üìä –î–∞–Ω–Ω—ã–µ —á–µ–∫–∞:
‚Ä¢ –î–∞—Ç–∞: {date_str}
‚Ä¢ –°—É–º–º–∞: {sum_str}
‚Ä¢ –ú–∞–≥–∞–∑–∏–Ω: {result.get('organization_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚Ä¢ –§–ù: {result.get('fiscal_number', '–ù/–î')}

üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ –≤–∞—à –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫:
‚Ä¢ –§–æ—Ç–æ —á–µ–∫–∞
‚Ä¢ CSV —Å –¥–∞–Ω–Ω—ã–º–∏

üìÅ –ü—É—Ç—å: /–ê–≤—Ç–æ—á–µ–∫–∏/{year}/{month:02d}/{user.first_name or user.username}
                """
                await processing_msg.edit_text(success_text)
            else:
                error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞:\n{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                await processing_msg.edit_text(error_text)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
            await processing_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ñ–æ—Ç–æ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.message()
async def handle_other_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ —á–µ–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n"
        "üí° –¢–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:\n"
        "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã (PDF, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)\n"
        "‚Ä¢ –ö–æ–º–∞–Ω–¥—ã: /help, /receipts\n\n"
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"
    )


@router.callback_query(F.data == "connect_disk")
async def callback_connect_disk(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞."""
    await callback.answer()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OAuth URL
    auth_url = user_oauth_service.get_authorization_url(
        callback.from_user.id,
        redirect_uri=REDIRECT_URI
    )
    
    connect_text = f"""
üîó <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞</b>

–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞:

1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
2Ô∏è‚É£ –í–æ–π–¥–∏—Ç–µ –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ø–Ω–¥–µ–∫—Å
3Ô∏è‚É£ –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –¥–∏—Å–∫—É
4Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ Telegram

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>
‚Ä¢ –¢–æ–∫–µ–Ω—ã —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ —É –≤–∞—Å –ª–æ–∫–∞–ª—å–Ω–æ
‚Ä¢ –ë–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –≤–∞—à–µ–º—É –¥–∏—Å–∫—É
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç

üí° <b>–ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>
‚Ä¢ –í—Å–µ —á–µ–∫–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –ø–∞–ø–∫—É /telegram_bot/
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", url=auth_url)],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", callback_data="check_connection")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(connect_text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "check_connection")
async def callback_check_connection(callback: CallbackQuery, db: AsyncSession):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –¥–∏—Å–∫—É."""
    await callback.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    is_connected = await user_oauth_service.test_user_disk_access(callback.from_user.id)
    
    if is_connected:
        success_text = """
‚úÖ <b>–Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!</b>

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ —á–µ–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –æ–±–ª–∞–∫–æ.

üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤: <code>/–ê–≤—Ç–æ—á–µ–∫–∏/</code>

–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ —á–µ–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!
"""
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_or_create_user(callback.from_user, db)
        keyboard = get_main_keyboard(True)
        
        await callback.message.edit_text(success_text, reply_markup=keyboard, parse_mode="HTML")
    else:
        error_text = """
‚ùå <b>–î–∏—Å–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω</b>

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
‚Ä¢ –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Å–∫—É
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.
"""
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        auth_url = user_oauth_service.get_authorization_url(
            callback.from_user.id,
            redirect_uri=REDIRECT_URI
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ", url=auth_url)],
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_connection")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(error_text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "disconnect_disk")
async def callback_disconnect_disk(callback: CallbackQuery):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞."""
    await callback.answer()
    
    disconnect_text = """
üîå <b>–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞</b>

‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫?

–ü–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:
‚Ä¢ –ù–æ–≤—ã–µ —á–µ–∫–∏ –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –æ–±–ª–∞–∫–æ
‚Ä¢ –°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è –Ω–∞ –¥–∏—Å–∫–µ
‚Ä¢ –¢–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã
‚Ä¢ –ú–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç

<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> —Å–Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∞–π—Ç–µ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã —Å –¥–∏—Å–∫–∞.
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –î–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å", callback_data="confirm_disconnect")],
        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(disconnect_text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "confirm_disconnect")
async def callback_confirm_disconnect(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –¥–∏—Å–∫–∞."""
    await callback.answer("üîÑ –û—Ç–∫–ª—é—á–∞–µ–º –¥–∏—Å–∫...")
    
    success = await user_oauth_service.disconnect_user_disk(callback.from_user.id)
    
    if success:
        success_text = """
‚úÖ <b>–Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω</b>

üîê –¢–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞ —É–¥–∞–ª–µ–Ω—ã
üìÅ –§–∞–π–ª—ã –Ω–∞ –¥–∏—Å–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
üîÑ –ú–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –¥–∏—Å–∫ –∑–∞–Ω–æ–≤–æ

–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —á–µ–∫–æ–≤ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –¥–∏—Å–∫ —Å–Ω–æ–≤–∞.
"""
    else:
        success_text = """
‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏</b>

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
"""
    
    keyboard = get_main_keyboard(False)
    await callback.message.edit_text(success_text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "disk_status")
async def callback_disk_status(callback: CallbackQuery, db: AsyncSession):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ –¥–∏—Å–∫–∞."""
    await callback.answer()
    
    user = await get_or_create_user(callback.from_user, db)
    if not user or not user.yandex_disk_connected:
        await callback.message.edit_text(
            "‚ùå –î–∏—Å–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω",
            reply_markup=get_main_keyboard(False)
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ
    disk_info = await user_cloud_storage_service.get_disk_info(user.id, db)
    
    if disk_info:
        # –ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±–µ–∑ –ø–æ–¥—Å—á–µ—Ç–∞ —Ñ–∞–π–ª–æ–≤ (—Ç–∞–∫ –∫–∞–∫ –º–µ—Ç–æ–¥ list_files –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)
        total_space = disk_info.get('total_space', 0)
        used_space = disk_info.get('used_space', 0)
        
        total_gb = total_space / (1024**3) if total_space else 0
        used_gb = used_space / (1024**3) if used_space else 0
        free_gb = total_gb - used_gb if total_gb > used_gb else 0
        
        status_text = f"""
üíæ <b>–°—Ç–∞—Ç—É—Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞</b>

‚úÖ <b>–ü–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç</b>
üìÖ –ü–æ–¥–∫–ª—é—á–µ–Ω: {user.yandex_connected_at.strftime('%d.%m.%Y %H:%M') if user.yandex_connected_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

üìä <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total_gb:.1f} –ì–ë
‚Ä¢ –ó–∞–Ω—è—Ç–æ: {used_gb:.1f} –ì–ë ({(used_gb/total_gb*100) if total_gb > 0 else 0:.1f}%)
‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ: {free_gb:.1f} –ì–ë

üìÅ <b>–ü–∞–ø–∫–∞ –¥–ª—è —á–µ–∫–æ–≤:</b> /–ê–≤—Ç–æ—á–µ–∫–∏/

üîÑ <b>–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ‚úÖ
‚Ä¢ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {user.yandex_token_expires_at.strftime('%d.%m.%Y %H:%M') if user.yandex_token_expires_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
"""
    else:
        status_text = """
üíæ <b>–°—Ç–∞—Ç—É—Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞</b>

‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º</b>

–î–∏—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:
‚Ä¢ –ò—Å—Ç–µ–∫ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é

–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –¥–∏—Å–∫.
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="disk_status")],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(status_text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "my_receipts")
async def callback_my_receipts(callback: CallbackQuery, db: AsyncSession):
    """–ü–æ–∫–∞–∑ —á–µ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await callback.answer()
    
    user = await get_or_create_user(callback.from_user, db)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    receipts = await ReceiptProcessor(user.id, db).get_user_receipts(limit=10)
    
    if not receipts:
        text = """
üìã <b>–í–∞—à–∏ —á–µ–∫–∏</b>

üì™ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–µ–∫–æ–≤.

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ —Å QR-–∫–æ–¥–æ–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏!
"""
    else:
        text = f"üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —á–µ–∫–∏ ({len(receipts)}):</b>\n\n"
        
        total_sum = sum(receipt['sum'] for receipt in receipts)
        
        for i, receipt in enumerate(receipts, 1):
            status_emoji = "‚úÖ" if receipt['is_processed'] else "‚è≥"
            
            text += f"{status_emoji} <b>–ß–µ–∫ #{receipt['id']}</b>\n"
            text += f"üìÖ {receipt['date']}\n"
            text += f"üí∞ {receipt['sum']:.2f} ‚ÇΩ\n"
            text += f"üè™ {receipt['organization'][:30]}...\n"
            
            if receipt['error']:
                text += f"‚ùå {receipt['error'][:50]}...\n"
            
            text += "\n"
        
        text += f"üíµ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {total_sum:.2f} ‚ÇΩ"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="full_report")],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "main_menu")
async def callback_main_menu(callback: CallbackQuery, db: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await callback.answer()
    
    user = await get_or_create_user(callback.from_user, db)
    
    welcome_text = f"""
ü§ñ <b>–ê–≤—Ç–æ—á–µ–∫–∏ - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}! üëã

üöÄ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
"""
    
    keyboard = get_main_keyboard(user.yandex_disk_connected if user else False)
    await callback.message.edit_text(welcome_text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "help")
async def callback_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏."""
    await callback.answer()
    
    help_text = """
üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É –ê–≤—Ç–æ—á–µ–∫–∏</b>

<b>üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–∏—Å–∫–∞:</b>
1. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫"
2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ
3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –¥–∏—Å–∫—É

<b>üì∏ –†–∞–±–æ—Ç–∞ —Å —á–µ–∫–∞–º–∏:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –±–æ—Ç—É
‚Ä¢ QR-–∫–æ–¥ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
‚Ä¢ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –≤–∞—à –¥–∏—Å–∫

<b>üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤:</b>
<code>/telegram_bot/
‚îú‚îÄ‚îÄ 2025/01/–í–∞—à–µ_–ò–º—è/
‚îÇ   ‚îú‚îÄ‚îÄ receipt_123_photo.jpg
‚îÇ   ‚îú‚îÄ‚îÄ receipt_123_data.json
‚îÇ   ‚îî‚îÄ‚îÄ receipts_2025_01.csv</code>

<b>üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –¢–æ–∫–µ–Ω—ã —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ —É –≤–∞—Å
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –¥–∞–Ω–Ω—ã–º–∏

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/disk - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏—Å–∫–æ–º
/receipts - –ú–æ–∏ —á–µ–∫–∏
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(help_text, reply_markup=keyboard, parse_mode="HTML")


@router.message(Command("connect_disk"))
async def cmd_connect_disk(message: Message, db: AsyncSession):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_or_create_user(message.from_user, db)
        
        if user.yandex_disk_connected:
            await message.answer(
                "‚úÖ –í–∞—à –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /disk_status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ /disconnect_disk –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è."
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è OAuth
        oauth_url = f"http://localhost:8080/connect/{user.id}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫", url=oauth_url)]
        ])
        
        await message.answer(
            "üîó –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∞—à–∏ —á–µ–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è "
            "–Ω–∞ –≤–∞—à –ª–∏—á–Ω—ã–π –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –≤ –ø–∞–ø–∫—É '–ê–≤—Ç–æ—á–µ–∫–∏'.\n\n"
            "‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ OAuth —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080.",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ OAuth: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("disk_status"))
async def cmd_disk_status(message: Message, db: AsyncSession):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–∏—Å–∫–∞"""
    try:
        user = await get_or_create_user(message.from_user, db)
        
        if not user.yandex_disk_connected:
            await message.answer(
                "‚ùå –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect_disk –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ
        disk_info = await user_cloud_storage_service.get_disk_info(user.id, db)
        
        if disk_info:
            total_gb = disk_info.get('total_space', 0) / (1024**3)
            free_gb = disk_info.get('free_space', 0) / (1024**3)
            used_gb = total_gb - free_gb
            
            status_text = f"""
‚úÖ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω

üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ:
‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º: {total_gb:.1f} –ì–ë
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used_gb:.1f} –ì–ë
‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ: {free_gb:.1f} –ì–ë

üìÖ –ü–æ–¥–∫–ª—é—á–µ–Ω: {user.yandex_connected_at.strftime('%d.%m.%Y %H:%M') if user.yandex_connected_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
            """
        else:
            status_text = """
‚ö†Ô∏è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–µ.

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ API

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –¥–∏—Å–∫ –∫–æ–º–∞–Ω–¥–æ–π /connect_disk
            """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –¥–∏—Å–∫", url=f"http://localhost:8080/disconnect/{user.id}")]
        ])
        
        await message.answer(status_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–∏—Å–∫–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–∏—Å–∫–∞.")


@router.message(F.text)
async def handle_text_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø–æ–º–æ—â—å –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    help_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–æ–≤.

üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ —Å QR-–∫–æ–¥–æ–º, –∏ —è:
‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞—é –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—é –∏—Ö –≤ –≤–∞—à –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
‚Ä¢ –°–æ–∑–¥–∞–º –æ—Ç—á–µ—Ç—ã

üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
/disk - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏—Å–∫–æ–º

üîó –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ —á–µ—Ä–µ–∑ /start
"""
    
    await message.answer(help_text)


@router.callback_query(lambda c: c.data == "user_disk_info")
async def show_user_disk_info(callback: CallbackQuery, db: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        user = await get_or_create_user(callback.from_user, db)
        
        if not user.yandex_disk_connected:
            await callback.answer("‚ùå –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ
        disk_info = await user_cloud_storage_service.get_disk_info(user.id, db)
        
        if disk_info:
            total_gb = disk_info.get('total_space', 0) / (1024**3)
            free_gb = disk_info.get('free_space', 0) / (1024**3)
            used_gb = total_gb - free_gb
            
            info_text = f"""
üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ

üíæ –û–±—â–∏–π –æ–±—ä–µ–º: {total_gb:.1f} –ì–ë
üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used_gb:.1f} –ì–ë
üìâ –°–≤–æ–±–æ–¥–Ω–æ: {free_gb:.1f} –ì–ë

üìÖ –ü–æ–¥–∫–ª—é—á–µ–Ω: {user.yandex_connected_at.strftime('%d.%m.%Y %H:%M') if user.yandex_connected_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
            """
        else:
            info_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(info_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–µ: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", show_alert=True)


@router.callback_query(F.data == "upload_receipt")
async def callback_upload_receipt(callback: CallbackQuery, db: AsyncSession):
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–∞."""
    await callback.answer()
    
    user = await get_or_create_user(callback.from_user, db)
    
    upload_text = """
üì∏ <b>–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞</b>

üìã <b>–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∏ –º—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ!</b>

üîç <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:</b>
‚Ä¢ QR-–∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–µ—Ç–∫–æ –≤–∏–¥–µ–Ω –∏ –Ω–µ —Ä–∞–∑–º—ã—Ç
‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, –±–µ–∑ —Ç–µ–Ω–µ–π
‚Ä¢ –ß–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—Å–ø—Ä–∞–≤–ª–µ–Ω (–±–µ–∑ —Å–∫–ª–∞–¥–æ–∫)
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG

üí° <b>–ß—Ç–æ –º—ã —Å–¥–µ–ª–∞–µ–º:</b>
‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–µ–º QR-–∫–æ–¥ —Å —á–µ–∫–∞
‚Ä¢ –ü–æ–ª—É—á–∏–º –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞ –∏–∑ –§–ù–° –†–æ—Å—Å–∏–∏
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏–º —Ñ–æ—Ç–æ –∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–∞—à –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
‚Ä¢ –°–æ–∑–¥–∞–¥–∏–º CSV –æ—Ç—á–µ—Ç –¥–ª—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏

üöÄ <b>–ì–æ—Ç–æ–≤—ã? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>
    """
    
    if not user.yandex_disk_connected:
        upload_text += "\n\n‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(upload_text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query()
async def handle_unknown_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback'–æ–≤."""
    await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True) 


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏

@router.callback_query(F.data == "admin_export_stats")
async def callback_admin_export_stats(callback: CallbackQuery, db: AsyncSession):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª"""
    await callback.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...")
    
    user, is_admin = await check_admin_rights(callback.from_user, db)
    if not is_admin:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        import io
        import csv
        from sqlalchemy import select, func
        from models import User, Receipt
        from datetime import datetime
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        stats_data = []
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        users_count = await db.scalar(select(func.count(User.id)))
        receipts_count = await db.scalar(select(func.count(Receipt.id)))
        total_sum = await db.scalar(select(func.sum(Receipt.total_sum)).where(Receipt.is_processed == True))
        
        stats_data.append(['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'])
        stats_data.append(['–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', users_count])
        stats_data.append(['–í—Å–µ–≥–æ —á–µ–∫–æ–≤', receipts_count])
        stats_data.append(['–û–±—â–∞—è —Å—É–º–º–∞', f"{total_sum or 0:,.2f} ‚ÇΩ"])
        stats_data.append(['–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞', datetime.now().strftime('%d.%m.%Y %H:%M')])
        
        # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª
        output = io.StringIO()
        writer = csv.writer(output)
        writer.writerows(stats_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        csv_content = output.getvalue().encode('utf-8')
        file = BufferedInputFile(csv_content, filename=f"admin_stats_{datetime.now().strftime('%Y%m%d_%H%M')}.csv")
        
        await callback.message.answer_document(
            file,
            caption="üìä <b>–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç.",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞", show_alert=True)


@router.callback_query(F.data == "admin_user_search") 
async def callback_admin_user_search(callback: CallbackQuery, db: AsyncSession):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer()
    
    user, is_admin = await check_admin_rights(callback.from_user, db)
    if not is_admin:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    search_text = """
üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞:</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ üÜî –ü–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ üë§ –ü–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ üì± –ü–æ Telegram username
‚Ä¢ üìß –ü–æ —Å—Ç–∞—Ç—É—Å—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

üí° <b>–ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–æ–¥–∫–ª—é—á–∏–ª–∏ –¥–∏—Å–∫)
‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏  
‚Ä¢ –ù–µ–¥–∞–≤–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –æ—à–∏–±–∫–∞–º–∏

<i>–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.</i>
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data="admin_users_active"),
            InlineKeyboardButton(text="üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ", callback_data="admin_users_inactive")
        ],
        [
            InlineKeyboardButton(text="üìÖ –ù–æ–≤—ã–µ", callback_data="admin_users_new"),
            InlineKeyboardButton(text="‚ö†Ô∏è –° –ø—Ä–æ–±–ª–µ–º–∞–º–∏", callback_data="admin_users_problems")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
    ])
    
    await callback.message.edit_text(search_text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "admin_report_summary")
async def callback_admin_report_summary(callback: CallbackQuery, db: AsyncSession):
    """–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–∏—Å—Ç–µ–º—ã"""
    await callback.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç...")
    
    user = await get_or_create_user(callback.from_user, db)
    if not user.is_admin:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        from sqlalchemy import select, func
        from models import User, Receipt
        from datetime import datetime, date, timedelta
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        today = date.today()
        week_ago = today - timedelta(days=7)
        month_ago = today - timedelta(days=30)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_users = await db.scalar(select(func.count(User.id)))
        active_users = await db.scalar(select(func.count(User.id)).where(User.yandex_disk_connected == True))
        total_receipts = await db.scalar(select(func.count(Receipt.id)))
        processed_receipts = await db.scalar(select(func.count(Receipt.id)).where(Receipt.is_processed == True))
        total_sum = await db.scalar(select(func.sum(Receipt.total_sum)).where(Receipt.is_processed == True))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥—ã
        receipts_today = await db.scalar(select(func.count(Receipt.id)).where(func.date(Receipt.created_at) == today))
        receipts_week = await db.scalar(select(func.count(Receipt.id)).where(Receipt.created_at >= week_ago))
        receipts_month = await db.scalar(select(func.count(Receipt.id)).where(Receipt.created_at >= month_ago))
        
        # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        avg_receipts_per_user = (total_receipts / active_users) if active_users > 0 else 0
        avg_sum_per_receipt = (total_sum / processed_receipts) if processed_receipts > 0 else 0
        
        report_text = f"""
üìä <b>–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–∏—Å—Ç–µ–º—ã</b>
<i>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}</i>

üéØ <b>–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: <code>{total_users}</code>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: <code>{active_users}</code> ({(active_users/total_users*100) if total_users > 0 else 0:.1f}%)
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: <code>{(active_users/total_users*100) if total_users > 0 else 0:.1f}%</code>

üßæ <b>–ß–µ–∫–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: <code>{total_receipts}</code>
‚Ä¢ –£—Å–ø–µ—à–Ω–æ: <code>{processed_receipts}</code> ({(processed_receipts/total_receipts*100) if total_receipts > 0 else 0:.1f}%)
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{avg_receipts_per_user:.1f}</code>

üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: <code>{total_sum or 0:,.2f} ‚ÇΩ</code>
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: <code>{avg_sum_per_receipt:.2f} ‚ÇΩ</code>

üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: <code>{receipts_today}</code> —á–µ–∫–æ–≤
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: <code>{receipts_week/7:.1f}</code> —á–µ–∫–æ–≤/–¥–µ–Ω—å
‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: <code>{receipts_month/30:.1f}</code> —á–µ–∫–æ–≤/–¥–µ–Ω—å
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞", callback_data="admin_export_summary"),
                InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è", callback_data="admin_stats")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –æ—Ç—á–µ—Ç–∞–º", callback_data="admin_reports")]
        ])
        
        await callback.message.edit_text(report_text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞", show_alert=True)


@router.callback_query(F.data.startswith("admin_"))
async def callback_admin_placeholder(callback: CallbackQuery, db: AsyncSession):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–π"""
    await callback.answer()
    
    user = await get_or_create_user(callback.from_user, db)
    if not user.is_admin:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    function_name = callback.data.replace("admin_", "").replace("_", " ").title()
    
    placeholder_text = f"""
üöß <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>

‚öôÔ∏è <b>–§—É–Ω–∫—Ü–∏—è:</b> {function_name}
üìÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
üîÑ <b>–í–µ—Ä—Å–∏—è:</b> v2.0

üí° <b>–ß—Ç–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ:</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã  
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∞–ª–µ—Ä—Ç—ã

üìù <b>–¢–µ–∫—É—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ ‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ ‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
‚Ä¢ ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã

üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.

<i>–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏!</i>
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫", callback_data="admin_feedback"),
            InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", callback_data="admin_subscribe")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(placeholder_text, reply_markup=keyboard, parse_mode="HTML")


async def check_admin_rights(user_from_telegram, db: AsyncSession) -> tuple[User, bool]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (user_object, is_admin)
    """
    try:
        user = await get_or_create_user(user_from_telegram, db)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_from_telegram.id}: "
                   f"user.id={user.id}, is_admin={user.is_admin}")
        
        if not user.is_admin:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            from sqlalchemy import select
            from models import User
            
            fresh_user = await db.scalar(select(User).where(User.telegram_id == user_from_telegram.id))
            if fresh_user and fresh_user.is_admin:
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                user.is_admin = True
                await db.commit()
                logger.info(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                return user, True
            else:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
                return user, False
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            return user, True
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return None, False


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def admin_required(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ callback'–∞—Ö"""
    async def wrapper(callback: CallbackQuery, db: AsyncSession):
        user, is_admin = await check_admin_rights(callback.from_user, db)
        if not is_admin:
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        return await func(callback, db, user)
    return wrapper


