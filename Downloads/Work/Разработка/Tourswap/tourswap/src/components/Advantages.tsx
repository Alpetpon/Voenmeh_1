"use client";

import React from "react";
import { cn } from "@/lib/utils";
import createGlobe from "cobe";
import { useEffect, useRef } from "react";
import { motion } from "motion/react";
import { ShieldCheck, HandCoins, Headset, Plane, MapPin, CreditCard } from "lucide-react";
import WorldMap from "@/components/ui/world-map";
import { AnimatedList } from "@/components/magicui/animated-list";
import { SecurityBeamDemo } from "@/components/SecurityBeamDemo";

export function Advantages() {
  const features = [
    {
    title: "500+ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É",
      description:
        "–†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º–∏, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ—Ç–µ–Ω —Ç—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä—ã–Ω–∫–∞ –°–ù–ì.",
      skeleton: <SkeletonOne />,
      className:
        "col-span-1 lg:col-span-4 border-b lg:border-r border-orange-200",
    },
    {
      title: "–õ—É—á—à–∏–µ —Ü–µ–Ω—ã –Ω–∞ —Ä—ã–Ω–∫–µ",
      description:
        "–ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ü–µ–Ω—ã —É —Å–æ—Ç–µ–Ω —Ç—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–∫–∏–¥–∫–∏ –¥–æ 70%.",
      skeleton: <SkeletonTwo />,
      className: "border-b col-span-1 lg:col-span-2 border-orange-200",
    },
    {
      title: "–ì–∞—Ä–∞–Ω—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
      description:
        "–í–∞—à–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –Ω–∞—à –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç. –¢—â–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—â–∏—â—ë–Ω–Ω—ã–µ –ø–ª–∞—Ç—ë–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Å—Ç—Ä–∞—Ö—É–µ–º –∫–∞–∂–¥—É—é –ø–æ–µ–∑–¥–∫—É.",
      skeleton: <SkeletonThree />,
      className:
        "col-span-1 lg:col-span-3 lg:border-r border-orange-200",
    },
    {
    title: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ 24/7",
      description:
        "–ö–æ–º–∞–Ω–¥–∞ –æ–ø—ã—Ç–Ω—ã—Ö —Ç—Ä–µ–≤–µ–ª-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤ –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏. –ü–æ–º–æ–≥–∞–µ–º —Å –≤—ã–±–æ—Ä–æ–º —Ç—É—Ä–∞ –∏ —Ä–µ—à–∞–µ–º –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤–æ –≤—Ä–µ–º—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.",
      skeleton: <SkeletonFour />,
      className: "col-span-1 lg:col-span-3 border-b lg:border-none",
    },
  ];
  
  return (
    <div className="relative z-20 py-6 lg:py-20 max-w-7xl mx-auto">
      <div className="px-8">
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.2 }}
          className="mb-12 will-change-transform"
          style={{ willChange: 'transform, opacity', transform: 'translateZ(0)' }}
        >
          <h2 className="text-4xl md:text-5xl font-bold text-gray-900 mb-4 text-left">
            –ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
          </h2>

          <p className="text-xl text-gray-600 max-w-2xl text-left">
            –û—Ç –ø–æ–∏—Å–∫–∞ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–≥–æ –æ—Ç–¥—ã—Ö–∞ - –º—ã –¥–µ–ª–∞–µ–º –≤–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º.
          </p>
        </motion.div>
      </div>

      <div className="relative">
        <div className="grid grid-cols-1 lg:grid-cols-6 mt-8 xl:border rounded-md border-orange-200">
          {features.map((feature) => (
            <FeatureCard key={feature.title} className={feature.className}>
              <FeatureTitle>{feature.title}</FeatureTitle>
              <FeatureDescription>{feature.description}</FeatureDescription>
              <div className="h-full w-full">{feature.skeleton}</div>
            </FeatureCard>
          ))}
        </div>
      </div>
    </div>
  );
}

const FeatureCard = ({
  children,
  className,
}: {
  children?: React.ReactNode;
  className?: string;
}) => {
  return (
    <div className={cn(`p-4 sm:p-8 relative overflow-hidden`, className)}>
      {children}
    </div>
  );
};

const FeatureTitle = ({ children }: { children?: React.ReactNode }) => {
  return (
    <p className="max-w-5xl mx-auto text-left tracking-tight text-gray-900 text-xl md:text-2xl md:leading-snug font-semibold">
      {children}
    </p>
  );
};

const FeatureDescription = ({ children }: { children?: React.ReactNode }) => {
  return (
    <p
      className={cn(
        "text-sm md:text-base max-w-4xl text-left mx-auto",
        "text-gray-600 text-center font-normal",
        "text-left max-w-sm mx-0 md:text-sm my-2"
      )}
    >
      {children}
    </p>
  );
};

export const SkeletonOne = () => {
      return (
    <div className="relative flex py-2 px-2 gap-10 h-full">
      <div className="w-full p-2 mx-auto h-full">
        <div className="flex flex-1 w-full h-full flex-col space-y-2">
          <WorldMap 
              lineColor="#fb923c"
              dots={[
                // –ï–≤—Ä–æ–ø–∞ -> –ê–∑–∏—è
                { start: { lat: 55.7558, lng: 37.6173 }, end: { lat: 41.0082, lng: 28.9784 } }, // –ú–æ—Å–∫–≤–∞ -> –°—Ç–∞–º–±—É–ª
                
                // –ê–∑–∏—è -> –ë–ª–∏–∂–Ω–∏–π –í–æ—Å—Ç–æ–∫
                { start: { lat: 41.0082, lng: 28.9784 }, end: { lat: 25.276987, lng: 55.296249 } }, // –°—Ç–∞–º–±—É–ª -> –î—É–±–∞–π
                
                // –ë–ª–∏–∂–Ω–∏–π –í–æ—Å—Ç–æ–∫ -> –Æ–∂–Ω–∞—è –ê–∑–∏—è
                { start: { lat: 25.276987, lng: 55.296249 }, end: { lat: 27.1751, lng: 78.0421 } }, // –î—É–±–∞–π -> –î–µ–ª–∏
                
                // –Æ–∂–Ω–∞—è –ê–∑–∏—è -> –Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω–∞—è –ê–∑–∏—è
                { start: { lat: 27.1751, lng: 78.0421 }, end: { lat: 13.7563, lng: 100.5018 } }, // –î–µ–ª–∏ -> –ë–∞–Ω–≥–∫–æ–∫
                
                // –Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω–∞—è –ê–∑–∏—è -> –û–∫–µ–∞–Ω–∏—è
                { start: { lat: 13.7563, lng: 100.5018 }, end: { lat: -8.7832, lng: 115.2169 } }, // –ë–∞–Ω–≥–∫–æ–∫ -> –ë–∞–ª–∏
                
                // –û–∫–µ–∞–Ω–∏—è -> –ê—Ñ—Ä–∏–∫–∞
                { start: { lat: -8.7832, lng: 115.2169 }, end: { lat: -1.2921, lng: 36.8219 } }, // –ë–∞–ª–∏ -> –ù–∞–π—Ä–æ–±–∏
                
                // –ê—Ñ—Ä–∏–∫–∞ -> –ï–≤—Ä–æ–ø–∞
                { start: { lat: -1.2921, lng: 36.8219 }, end: { lat: 51.5074, lng: -0.1278 } }, // –ù–∞–π—Ä–æ–±–∏ -> –õ–æ–Ω–¥–æ–Ω
                
                // –ï–≤—Ä–æ–ø–∞ -> –°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞
                { start: { lat: 51.5074, lng: -0.1278 }, end: { lat: 40.7128, lng: -74.006 } }, // –õ–æ–Ω–¥–æ–Ω -> –ù—å—é-–ô–æ—Ä–∫
                
                // –°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞ -> –Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞
                { start: { lat: 40.7128, lng: -74.006 }, end: { lat: -15.7975, lng: -47.8919 } }, // –ù—å—é-–ô–æ—Ä–∫ -> –ë—Ä–∞–∑–∏–ª–∏–∞
                
                // –Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞ -> –ï–≤—Ä–æ–ø–∞
                { start: { lat: -15.7975, lng: -47.8919 }, end: { lat: 55.7558, lng: 37.6173 } }, // –ë—Ä–∞–∑–∏–ª–∏–∞ -> –ú–æ—Å–∫–≤–∞
              ]}
            />
        </div>
      </div>


    </div>
  );
};

interface PriceItem {
  name: string;
  description: string;
  icon: string;
  color: string;
  time: string;
}

const PriceNotification = ({ name, description, icon, color, time }: PriceItem) => {
  return (
    <figure
      className={cn(
        "relative mx-auto min-h-fit w-full max-w-[400px] cursor-pointer overflow-hidden rounded-2xl p-4",
        "transition-all duration-200 ease-in-out hover:scale-[103%]",
        "bg-white border border-orange-200 shadow-sm hover:shadow-md",
      )}
    >
      <div className="flex flex-row items-center gap-3">
        <div className="flex flex-col overflow-hidden">
          <figcaption className="flex flex-row items-center whitespace-pre text-lg font-medium text-gray-900">
            <span className="text-sm sm:text-lg">{name}</span>
            <span className="mx-1">¬∑</span>
            <span className="text-xs text-orange-600 font-bold">{time}</span>
          </figcaption>
          <p className="text-sm font-normal text-gray-600">
            {description}
          </p>
        </div>
      </div>
    </figure>
  );
};

export const SkeletonTwo = () => {
  let priceUpdates = [
    {
      name: "–¢—É—Ä—Ü–∏—è, –ê–Ω—Ç–∞–ª–∏—è",
      description: "–¶–µ–Ω–∞ —Å–Ω–∏–∂–µ–Ω–∞ –Ω–∞ 2000‚ÇΩ",
      time: "-70%",
      icon: "‚úàÔ∏è",
      color: "#fb923c",
    },
    {
      name: "–ï–≥–∏–ø–µ—Ç, –•—É—Ä–≥–∞–¥–∞",
      description: "–ì–æ—Ä—è—â–∏–π —Ç—É—Ä –Ω–∞–π–¥–µ–Ω",
      time: "-65%",
      icon: "üèñÔ∏è",
      color: "#f97316",
    },
    {
      name: "–û–ê–≠, –î—É–±–∞–π",
      description: "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
      time: "-60%",
      icon: "üèôÔ∏è",
      color: "#ea580c",
    },
    {
      name: "–ú–∞–ª—å–¥–∏–≤—ã",
      description: "–õ—É—á—à–∞—è —Ü–µ–Ω–∞ –∑–∞ —Å–µ–∑–æ–Ω",
      time: "-55%",
      icon: "üèùÔ∏è",
      color: "#dc2626",
    },
    {
      name: "–¢–∞–∏–ª–∞–Ω–¥, –ü—Ö—É–∫–µ—Ç",
      description: "–ê–∫—Ü–∏—è –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞",
      time: "-50%",
      icon: "üå¥",
      color: "#c2410c",
    },
    {
      name: "–ì—Ä–µ—Ü–∏—è, –ö—Ä–∏—Ç",
      description: "–†–∞–Ω–Ω–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
      time: "-45%",
      icon: "üèõÔ∏è",
      color: "#b45309",
    },
  ];

  priceUpdates = Array.from({ length: 3 }, () => priceUpdates).flat();
  
  return (
    <div className="relative flex h-[400px] w-full flex-col overflow-hidden p-2">
      <AnimatedList delay={2000}>
        {priceUpdates.map((item, idx) => (
          <PriceNotification {...item} key={idx} />
        ))}
      </AnimatedList>
      <div className="pointer-events-none absolute inset-x-0 bottom-0 h-1/4 bg-gradient-to-t from-white"></div>
    </div>
  );
};

export const SkeletonThree = () => {
  return (
    <div className="relative flex flex-col items-center justify-center p-0 h-full -mt-16">
      <SecurityBeamDemo />
      </div>
  );
};

export const SkeletonFour = () => {
  const [visibleMessages, setVisibleMessages] = React.useState<number>(0);
  const allMessages = [
    { id: 1, text: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", isBot: true, time: "14:30" },
    { id: 2, text: "–•–æ—á—É –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä –≤ –¢—É—Ä—Ü–∏—é", isBot: false, time: "14:31" },
    { id: 3, text: "–û—Ç–ª–∏—á–Ω–æ! –£ –Ω–∞—Å –µ—Å—Ç—å –≥–æ—Ä—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç 45,000‚ÇΩ", isBot: true, time: "14:31" },
    { id: 4, text: "–ü–æ–∫–∞–∂–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", isBot: false, time: "14:32" },
    { id: 5, text: "–û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞–º –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è...", isBot: true, time: "14:32" },
  ];

  React.useEffect(() => {
    const interval = setInterval(() => {
      setVisibleMessages(prev => {
        if (prev < allMessages.length) {
          return prev + 1;
        } else {
          // –ö–æ–≥–¥–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
          return 1;
        }
      });
    }, 3000);

    return () => clearInterval(interval);
  }, []);

  return (
    <div className="h-80 md:h-80 flex flex-col relative p-4 overflow-hidden">


      {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
      <div className="flex-1 mb-4 flex flex-col justify-end overflow-hidden">
        <div className="flex-1 flex flex-col justify-end space-y-3">
          {allMessages.slice(0, visibleMessages).map((message) => (
        <motion.div
              key={`${message.id}-${visibleMessages}`}
              initial={{ opacity: 0, y: 20, scale: 0.95 }}
              animate={{ opacity: 1, y: 0, scale: 1 }}
              exit={{ opacity: 0, y: -20, scale: 0.95 }}
          transition={{ 
            duration: 0.8, 
                ease: "easeOut",
            type: "spring",
            stiffness: 100,
                damping: 15
              }}
              className={`flex ${message.isBot ? 'justify-start' : 'justify-end'}`}
            >
              <div className={`max-w-xs px-3 py-2 rounded-2xl ${
                message.isBot 
                  ? 'bg-orange-100 text-gray-800' 
                  : 'bg-orange-500 text-white'
              }`}>
                <p className="text-sm">{message.text}</p>
                <p className={`text-xs mt-1 ${
                  message.isBot ? 'text-gray-500' : 'text-orange-100'
                }`}>
                  {message.time}
                </p>
              </div>
            </motion.div>
          ))}
        </div>
      </div>

      {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
      <div className="flex items-center space-x-2">
        <div className="flex-1 bg-gray-50 rounded-full px-4 py-2">
          <input 
            type="text" 
            placeholder="–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ..."
            className="w-full bg-transparent text-sm outline-none"
            disabled
          />
        </div>
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          className="w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center"
        >
          <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
          </svg>
        </motion.button>
      </div>
    </div>
  );
};

export const Globe = ({ className }: { className?: string }) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);

  useEffect(() => {
    let phi = 0;

    if (!canvasRef.current) return;

    const globe = createGlobe(canvasRef.current, {
      devicePixelRatio: 2,
      width: 600 * 2,
      height: 600 * 2,
      phi: 0,
      theta: 0,
      dark: 0,
      diffuse: 1.8,
      mapSamples: 16000,
      mapBrightness: 3,
      baseColor: [0.8, 0.8, 0.8], // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ü–≤–µ—Ç –∑–µ–º–ª–∏
      markerColor: [1, 0.4, 0.1], // –Ø—Ä–∫–∏–π –æ—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
      glowColor: [0, 0, 0], // –£–±–∏—Ä–∞–µ–º —Å–≤–µ—á–µ–Ω–∏–µ
      markers: [
        // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        { location: [41.0082, 28.9784], size: 0.05 }, // –°—Ç–∞–º–±—É–ª
        { location: [25.2048, 55.2708], size: 0.04 }, // –î—É–±–∞–π  
        { location: [27.1751, 78.0421], size: 0.03 }, // –ê–≥—Ä–∞ (–¢–∞–¥–∂-–ú–∞—Ö–∞–ª)
        { location: [13.7563, 100.5018], size: 0.04 }, // –ë–∞–Ω–≥–∫–æ–∫
        { location: [4.2105, 73.1560], size: 0.03 }, // –ú–∞–ª–µ (–ú–∞–ª—å–¥–∏–≤—ã)
        { location: [26.0667, 50.5577], size: 0.03 }, // –ú–∞–Ω–∞–º–∞ (–ë–∞—Ö—Ä–µ–π–Ω)
      ],
      onRender: (state) => {
        state.phi = phi;
        phi += 0.005; // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ
      },
    });

    return () => {
      globe.destroy();
    };
  }, []);

  return (
    <canvas
      ref={canvasRef}
      style={{ width: 600, height: 600, maxWidth: "100%", aspectRatio: 1 }}
      className={className}
    />
  );
};

export default Advantages;