#!/usr/bin/env python3
"""
–†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import asyncio
import sys
import os
from datetime import datetime
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(project_root)

from sync_service.clients.mysql_client import MySQLClient
from sync_service.clients.sheets_client import GoogleSheetsClient
from sync_service.config.config_loader import ConfigLoader

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add(
    "logs/manual_sync.log",
    rotation="10 MB",
    retention="7 days",
    level="DEBUG",
    format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level:<8} | {name}:{function}:{line} - {message}",
    encoding="utf-8"
)

# –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
logger.add(
    sys.stdout,
    level="INFO",
    format="<green>{time:HH:mm:ss}</green> | <level>{level:<8}</level> | <cyan>{message}</cyan>",
    colorize=True
)

# –¢–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
TABLES_TO_SYNC = [
    # WB —Ç–∞–±–ª–∏—Ü—ã
    ('voronka_wb', 'wb_voronka', 3000),
    ('price_wb', 'wb_price', 1000),
    ('tovar_wb', 'wb_tovar', 800),
    ('stock_wb', 'wb_sklad', 2000),
    ('priem_wb', 'wb_priem', 100),
    ('detaliz_wb', 'wb_detaliz', 1000),  # –ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ —É–º–µ–Ω—å—à–∏–ª–∏ –¥–æ 1000
    
    # OZON —Ç–∞–±–ª–∏—Ü—ã
    ('detaliz_ozon', 'ozon_detaliz', 1000),  # –ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ —É–º–µ–Ω—å—à–∏–ª–∏ –¥–æ 1000
    ('reklam_ozon', 'ozon_reklam', 800),
    ('tovar_ozon', 'ozon_tovar', 800),
    ('price_ozon', 'ozon_price', 800),
    ('voronka_ozon', 'ozon_voronka', 3000),  # –£–º–µ–Ω—å—à–∏–ª–∏ –¥–æ 3000
    ('zakfbo_ozon', 'ozon_zakfbo', 1000),
    ('prodfbo_ozon', 'ozon_prodfbo', 1000),
    ('zakfbs_ozon', 'ozon_zakfbs', 1000),
    ('prodfbs_ozon', 'ozon_prodfbs', 1000),
]

async def update_tech_sync_status(sheets_client, client_id, table_name, exported_from_db=True):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ tech —Ç–∞–±–ª–∏—Ü–µ"""
    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ tech –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}, —Ç–∞–±–ª–∏—Ü–∞ {table_name}, exported_from_db={exported_from_db}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ tech —Ç–∞–±–ª–∏—Ü—ã
        logger.debug("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ tech —Ç–∞–±–ª–∏—Ü—ã")
        tech_data = await sheets_client.get_sheet_data('tech')
        
        if not tech_data:
            logger.warning("Tech table is empty")
            print("  ‚ö†Ô∏è Tech table is empty")
            return False
        
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(tech_data)} —Å—Ç—Ä–æ–∫ –∏–∑ tech —Ç–∞–±–ª–∏—Ü—ã")
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        row_to_update = None
        row_index = None
        
        for i, row in enumerate(tech_data[1:], start=2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2 (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
            if len(row) >= 3 and row[0] == client_id and row[2] == table_name:
                row_to_update = row
                row_index = i
                logger.debug(f"–ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: —Å—Ç—Ä–æ–∫–∞ {row_index}, –¥–∞–Ω–Ω—ã–µ: {row}")
                break
        
        if not row_to_update:
            logger.warning(f"No row found in tech table for client {client_id}, table {table_name}")
            print(f"  ‚ö†Ô∏è No row found in tech table for client {client_id}, table {table_name}")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        updated_row = list(row_to_update)
        
        # –î–æ–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É –¥–æ 7 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        while len(updated_row) < 7:
            updated_row.append('')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É "–í—ã–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –±–∞–∑—ã" (–∏–Ω–¥–µ–∫—Å 6)
        old_value = updated_row[6] if len(updated_row) > 6 else ''
        updated_row[6] = str(exported_from_db).upper()
        
        logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å '{old_value}' –Ω–∞ '{updated_row[6]}'")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        range_name = f"A{row_index}:G{row_index}"
        logger.debug(f"–ó–∞–ø–∏—Å—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω {range_name}")
        await sheets_client.update_sheet_data('tech', range_name, [updated_row])
        
        logger.info(f"–°—Ç–∞—Ç—É—Å tech –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ: {table_name} exported_from_db={exported_from_db}")
        print(f"  ‚úÖ Updated tech status: {table_name} exported_from_db={exported_from_db}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ tech: {e}")
        print(f"  ‚ùå Error updating tech sync status: {e}")
        return False


async def ensure_sheet_exists(sheets_client, sheet_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞: {sheet_name}")
    
    try:
        sheet_exists = await sheets_client.sheet_exists(sheet_name)
        logger.debug(f"–õ–∏—Å—Ç {sheet_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {sheet_exists}")
        
        if not sheet_exists:
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–≥–æ –ª–∏—Å—Ç–∞: {sheet_name}")
            print(f"  ‚ûï –°–æ–∑–¥–∞—é –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –ª–∏—Å—Ç: {sheet_name}")
            
            await sheets_client.create_sheet(sheet_name)
            logger.debug(f"–õ–∏—Å—Ç {sheet_name} —Å–æ–∑–¥–∞–Ω")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–∏—Å—Ç–∞
            logger.debug(f"–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ª–∏—Å—Ç–∞ {sheet_name} –¥–æ 20000x30")
            await sheets_client.resize_sheet(sheet_name, rows=20000, cols=30)
            
            logger.info(f"–õ–∏—Å—Ç {sheet_name} —Å–æ–∑–¥–∞–Ω –∏ —É–≤–µ–ª–∏—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"  ‚úÖ –õ–∏—Å—Ç {sheet_name} —Å–æ–∑–¥–∞–Ω –∏ —É–≤–µ–ª–∏—á–µ–Ω")
        else:
            logger.debug(f"–õ–∏—Å—Ç {sheet_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            print(f"  ‚ÑπÔ∏è –õ–∏—Å—Ç {sheet_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ {sheet_name}: {e}")
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ {sheet_name}: {e}")
        raise


async def sync_single_table(mysql_client, sheets_client, mysql_table, sheet_name, max_records, main_sheets_client):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –æ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    
    logger.info(f"–ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {mysql_table} -> {sheet_name} (–º–∞–∫—Å. {max_records} –∑–∞–ø–∏—Å–µ–π)")
    print(f"\n{'='*60}")
    print(f"üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: {mysql_table} -> {sheet_name}")
    print(f"{'='*60}")
    
    try:
        # –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ {sheet_name}")
        await ensure_sheet_exists(sheets_client, sheet_name)
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        logger.info(f"–®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MySQL —Ç–∞–±–ª–∏—Ü—ã {mysql_table}")
        print(f"üìä –®–∞–≥ 1: –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ {mysql_table}...")
        
        query = f'SELECT * FROM {mysql_table} ORDER BY id LIMIT {max_records}'
        logger.debug(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞: {query}")
        
        data = await mysql_client.fetch_all(query)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –ë–î: {len(data)} –∑–∞–ø–∏—Å–µ–π")
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –ë–î: {len(data)} –∑–∞–ø–∏—Å–µ–π")
        
        if not data:
            logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î {mysql_table} - –ø—Ä–æ–ø—É—Å–∫–∞—é")
            print("   ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î - –ø—Ä–æ–ø—É—Å–∫–∞—é")
            return False
        
        # 2. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        logger.info(f"–®–∞–≥ 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets")
        print(f"üìù –®–∞–≥ 2: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ...")
        
        headers = list(data[0].keys())
        logger.debug(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {headers}")
        
        rows_data = [headers]
        
        for row in data:
            rows_data.append([str(row[col]) if row[col] is not None else '' for col in headers])
        
        logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: {len(rows_data)} —Å—Ç—Ä–æ–∫ (–≤–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–∫–∏)")
        logger.debug(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers[:5]}...")
        logger.debug(f"–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {rows_data[1][:5]}...")
        
        print(f"   –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: {len(rows_data)} —Å—Ç—Ä–æ–∫ (–≤–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–∫–∏)")
        print(f"   –ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers[:5]}...")
        print(f"   –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {rows_data[1][:5]}...")
        
        # 3. –û—á–∏—â–∞–µ–º –ª–∏—Å—Ç
        logger.info(f"–®–∞–≥ 3: –û—á–∏—Å—Ç–∫–∞ –ª–∏—Å—Ç–∞ {sheet_name}")
        print(f"üßπ –®–∞–≥ 3: –û—á–∏—â–∞—é –ª–∏—Å—Ç {sheet_name}...")
        
        await sheets_client.clear_sheet_data(sheet_name)
        logger.debug(f"–õ–∏—Å—Ç {sheet_name} –æ—á–∏—â–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–∏—Å—Ç–∫—É
        check_clear = await sheets_client.get_sheet_data(sheet_name, 'A1:E3')
        logger.debug(f"–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –≤ –ª–∏—Å—Ç–µ {sheet_name}: {len(check_clear)} —Å—Ç—Ä–æ–∫")
        print(f"   –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(check_clear)} —Å—Ç—Ä–æ–∫")
        
        # 4. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        logger.info(f"–®–∞–≥ 4: –ó–∞–ø–∏—Å—å {len(rows_data)} —Å—Ç—Ä–æ–∫ –≤ Google Sheets")
        print(f"üìÑ –®–∞–≥ 4: –ó–∞–ø–∏—Å—ã–≤–∞—é {len(rows_data)} —Å—Ç—Ä–æ–∫...")
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∫–æ–ª–æ–Ω–∫–∏ –≤ –±—É–∫–≤—É (A, B, ..., Z, AA, AB, ...)
        def num_to_col_letters(num):
            letters = ''
            while num > 0:
                num -= 1
                letters = chr(num % 26 + ord('A')) + letters
                num //= 26
            return letters
        
        end_col = num_to_col_letters(len(headers))
        range_name = f'A1:{end_col}{len(rows_data)}'
        logger.debug(f"–ó–∞–ø–∏—Å—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω: {range_name} ({len(headers)} –∫–æ–ª–æ–Ω–æ–∫, {len(rows_data)} —Å—Ç—Ä–æ–∫)")
        
        await sheets_client.update_sheet_data(sheet_name, range_name, rows_data)
        logger.info(f"–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω: {range_name}")
        print(f"   –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω: {range_name}")
        
        # 5. –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        logger.debug("–®–∞–≥ 5: –û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Google Sheets")
        print(f"‚è≥ –®–∞–≥ 5: –ñ–¥—É 3 —Å–µ–∫—É–Ω–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        await asyncio.sleep(3)
        
        # 6. –ü–†–û–í–ï–†–Ø–ï–ú —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info(f"–®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        print(f"üîç –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
        verification_data = await sheets_client.get_sheet_data(sheet_name, 'A1:E5')
        logger.debug(f"–ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –ª–∏—Å—Ç–µ {sheet_name}: {len(verification_data)} —Å—Ç—Ä–æ–∫")
        print(f"   –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏: {len(verification_data)} —Å—Ç—Ä–æ–∫")
        
        if verification_data:
            for i, row in enumerate(verification_data[:3]):
                logger.debug(f"–°—Ç—Ä–æ–∫–∞ {i+1}: {row}")
                print(f"   –°—Ç—Ä–æ–∫–∞ {i+1}: {row}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        all_data = await sheets_client.get_sheet_data(sheet_name, 'A:A')
        total_rows = len([row for row in all_data if row and any(str(cell).strip() for cell in row if cell)])
        
        logger.info(f"–ò—Ç–æ–≥–æ –≤ –ª–∏—Å—Ç–µ {sheet_name}: {total_rows} —Å—Ç—Ä–æ–∫ (–≤–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–∫–∏)")
        print(f"   üìä –ò–¢–û–ì–û –≤ –ª–∏—Å—Ç–µ: {total_rows} —Å—Ç—Ä–æ–∫ (–≤–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–∫–∏)")
        
        actual_records = max(0, total_rows - 1)  # –ú–∏–Ω—É—Å –∑–∞–≥–æ–ª–æ–≤–∫–∏
        
        if actual_records > 0:
            logger.success(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {actual_records} –∑–∞–ø–∏—Å–µ–π –¥–∞–Ω–Ω—ã—Ö –≤ {sheet_name}")
            print(f"   ‚úÖ –£–°–ü–ï–•: {actual_records} –∑–∞–ø–∏—Å–µ–π –¥–∞–Ω–Ω—ã—Ö")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ tech —Ç–∞–±–ª–∏—Ü–µ
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ tech —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è {sheet_name}")
            print(f"   üìù –û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç—É—Å –≤ tech —Ç–∞–±–ª–∏—Ü–µ...")
            await update_tech_sync_status(main_sheets_client, '295380283', sheet_name, True)
            
            return True
        else:
            logger.error(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {sheet_name}")
            print(f"   ‚ùå –ü–†–û–í–ê–õ: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {mysql_table} -> {sheet_name}: {e}")
        print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    
    logger.info("–ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü")
    print("üöÄ –†–£–ß–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –¢–ê–ë–õ–ò–¶")
    print("=" * 60)
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        config_loader = ConfigLoader()
        config = config_loader.load_env_config()
        logger.debug("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MySQL –∫–ª–∏–µ–Ω—Ç–∞")
        mysql_client = MySQLClient(
            host=config['mysql'].host,
            user=config['mysql'].user,
            password=config['mysql'].password,
            database=config['mysql'].database,
            port=config['mysql'].port
        )
        await mysql_client.create_pool(minsize=1, maxsize=2)
        logger.info("MySQL –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã (–¥–ª—è tech –ª–∏—Å—Ç–∞)
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã")
        main_sheets_client = GoogleSheetsClient(
            credentials_file=config['google_sheets'].credentials_file,
            spreadsheet_id=config['google_sheets'].spreadsheet_id
        )
        await main_sheets_client.authenticate()
        logger.info(f"Google Sheets –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {config['google_sheets'].spreadsheet_id}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è –¥–∞–Ω–Ω—ã—Ö)
        client_spreadsheet_id = '10cITrzTovnJw3t9ZF1SzcOtJvz9P3re6AhbLkbbG0sg'
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã: {client_spreadsheet_id}")
        client_sheets_client = GoogleSheetsClient(
            credentials_file=config['google_sheets'].credentials_file,
            spreadsheet_id=client_spreadsheet_id
        )
        await client_sheets_client.authenticate()
        logger.info(f"Google Sheets –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {client_spreadsheet_id}")
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        logger.success("–í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ –æ—á–µ—Ä–µ–¥–∏
        success_count = 0
        total_tables = len(TABLES_TO_SYNC)
        
        logger.info(f"–ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {total_tables} —Ç–∞–±–ª–∏—Ü")
        
        for i, (mysql_table, sheet_name, max_records) in enumerate(TABLES_TO_SYNC, 1):
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã {i}/{total_tables}: {mysql_table} -> {sheet_name}")
            
            try:
                result = await sync_single_table(mysql_client, client_sheets_client, mysql_table, sheet_name, max_records, main_sheets_client)
                if result:
                    success_count += 1
                    logger.success(f"{sheet_name}: –£–°–ü–ï–®–ù–û")
                    print(f"‚úÖ {sheet_name}: –£–°–ü–ï–®–ù–û")
                else:
                    logger.error(f"{sheet_name}: –ü–†–û–í–ê–õ")
                    print(f"‚ùå {sheet_name}: –ü–†–û–í–ê–õ")
                    
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
                logger.debug("–ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏")
                await asyncio.sleep(2)
                
            except Exception as e:
                logger.error(f"{sheet_name}: –û–®–ò–ë–ö–ê - {e}")
                print(f"‚ùå {sheet_name}: –û–®–ò–ë–ö–ê - {e}")
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ MySQL –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
        await mysql_client.close_pool()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count}/{total_tables} —Ç–∞–±–ª–∏—Ü —É—Å–ø–µ—à–Ω–æ")
        print(f"\nüèÅ –ò–¢–û–ì: {success_count}/{total_tables} —Ç–∞–±–ª–∏—Ü —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
        if success_count == total_tables:
            logger.success("–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        else:
            logger.warning(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–ª—å–∫–æ {success_count} –∏–∑ {total_tables} —Ç–∞–±–ª–∏—Ü")
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}")
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
